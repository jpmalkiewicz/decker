english
// ****************************************************************************************************************************************************
// structure types ************************************************************************************************************************************
// ****************************************************************************************************************************************************

// mission goal types *********************************************************************************************************************************

	structure
		CRASH_SYSTEM
			status = INCOMPLETE
			incomplete
			completed

		CREATE_BACKDOOR            extends CRASH_SYSTEM

		DOWNLOAD_FILE              extends CRASH_SYSTEM
			target

		DOWNLOAD_AND_ERASE_FILE    extends DOWNLOAD_FILE

		EDIT_FILE                  extends DOWNLOAD_FILE

		ERASE_FILE                 extends DOWNLOAD_FILE

		MANIPULATE_IO              extends DOWNLOAD_FILE

		RUN_PROGRAM                extends DOWNLOAD_FILE
			program
			execution_time
			remaining_execution_time

		NO_RED_ALARM
			status = COMPLETED
			completed
			failed

		TIME_RESTRICTION
			start_time
			end_time
			status = COMPLETED
			completed
			incomplete
			failed

// system related types *******************************************************************************************************************************

		SYSTEM_TYPE
			name
			file
			deactivate_io_target
			activate_io_target
			sabotage_io_target
			useless_file

		SYSTEM
			name
			rating
			type
			alert_level = GREEN
			area
			entry_point      // usually a PORTAL_OUT node
			initializer = FUNCTION
				area = ARRAY

		AREA
			name
			id
			system
			rating
			map   // contains a two dimentional array with the node grid
			destroyed_ice
			ice_entry_node
			initializer = FUNCTION
				destroyed_ice = ARRAY

		NODE
			expandable = true
			name
			area
			x
			y
			connection    // if connection[direction] set to true, there is a connection in that direction
			type
			smoke_level
			objects       // ice and humans
			initializer = FUNCTION
				connection = ARRAY
					false
					false
					false
					false
				objects = ARRAY

		FILE
			name
			type
			size
			value
			data
			info_level = 0

		ICE_TYPE
			type
			attributes
			name
			image
			min_rating     // many ice types only have ice from a certain rating upwards
			description
			initializer = FUNCTION
				name = ARRAY
				image = ARRAY

		ICE
			expandable = true
			type   // an ICE_TYPE
			rating
			status
			damage = 0
			node
			x
			y
			// trace_time
			// trace_target
// ******************************************************************
// OUTDATED *********************************************************
// **** below are flags which can be set for ice types
// hardened   // takes reduced damage from area and normal attacks, normal damage from piercing attacks
// phasing    // takes reduced damage from piercing and normal attacks, normal damage from area attacks
// killer     // damage goes directly to the decker (as mental damage) instead of the deck. damage that overflows from either mental or deck damagebecomes physical damage
// crasher    // when attacking, there is a (damage dealt on attack * 10%) chance that the ice will crash (stop and unload) a random program loaded on the decker's deck
// attack_on_death
// white      // GATEWAY, PROBE, GUARDIAN, TAPEWORM ice
// black      // ATTACK, TRACE ice
// probe
// roam
// guard_file
// guard_exit
// attack
// trace
// dump_on_trace
// fry_chip_on_dump


// miscellaneous types ********************************************************************************************************************************


		THING_TYPE
			expandable = true
			name
			category               // an array listing all the categories this thing type belongs to
			// complexity          // determines the value, size and coding time for programs and chips
			// base_value          // the value of hardware is base_value * 2 ^ (rating-1)
			// value_function      // an optional function to calculate the value of things of this type
			// size_function       // an optional function to calculate the size of things of this type
			// default_name        // an array : default_name[x] is the default name of a thing of this type and item_rating x. for items with rating < 1 default_name[1] is used, for items with a higher rating than the array size, the last array entry is used, with the appendix "MK x" where x is (rating-max rating with name + 1) as a roman number
			// effect              // a function that gets executed when things of this type are used
			// max_rating          // some types of hardware have a max rating
			// image               // for programs

		THING
			expandable = true
			name
			type           // a THING_TYPE object
			rating
			size
			// state       // for programs on the deck, this can have the values INSTALLED, LOADED, DEFAULT
			// source_code // true if this thing is a source code
			// value       // the sale / purchase price

		DECK
			model = "(custom built)"
			damage = 0
			current_load = 0      // 0 = light, 1 = medium, 2 = high
			used_memory = 0       // sum of the sizes of the loaded programs
			cpu = 1
			coprocessor = 1
			attack = 1
			defense = 1
			stealth = 1
			analysis = 1
			program
			default_program
			optional_hardware
			initializer = FUNCTION
				program = ARRAY
				optional_hardware = ARRAY
				default_program = ARRAY
					UNDEFINED
					UNDEFINED
					UNDEFINED

		MISSION
			expandable = true
			available = defaultMissionAvailable   // this function will get called whenever we need to know whether this mission might become available
			status = INCOMPLETE
			accepted = false
			title
			description
			payment = defaultMissionPayment
			target_system
			goal
			rating = defaultMissionRating   // this function will get called when the actual mission is created from the template mission, and its return value will be used as the rating of the actual mission
			deadline = 5
			add_details_to_description = true  // if this is set to true, there will be a detailed description of the mission goals added to the end of the description
			age = 0
			reload_when_over = false     // if you set this to true, the mission will go back into the mission pool after it is removed from the list of available missions
			// setup       // put a function here to have it called when the mission is added to the list of available missions. the first parameter in the function call will be the mission
			scriptname     // leave this UNDEFINED. it will automatically be set to the name of the script that created the mission object
			// on_accepted // put trigger functions here
			// on_success
			// on_failure  // called every time the player fails an attempt to complete the mission
			// on_mission_over
			initializer = FUNCTION
				goal = ARRAY

		HUMAN
			expandable = true
			name
			image
			physical_damage = 0
			mental_damage = 0
			reputation_level = 0
			reputation_points = 0
			mission_base_rating = 1
			money = 0
			lifestyle = 0
			age = 1           // age of this character in days
			skill_points = 0
			attack = 1
			defense = 1
			stealth = 1
			analysis = 1
			programming = 1
			chip_design = 1
			deck
			current_mission
			current_system
			current_node
			current_target    // some ice or file
			current_program   // the program this human is currently trying to use
			current_time      // time for the current matrix run
