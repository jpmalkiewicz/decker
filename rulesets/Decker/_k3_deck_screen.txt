english
	RULESET.deck_screen = VIEW
		title = "Decker - Deck"
				
		LOCAL.screen_width = 540
		LOCAL.screen_height = 430
				
		back_button = BORDER_BUTTON
			x = screen_width - 18 - 24
			y = screen_height - 18 - 24
			idle = "home/home"
			on_mouse_up = FUNCTION
				displayPreviousScreen()

		scrollpane = SCROLLPANE
			x = 20
			y = 180
			width = 404
			height = screen_height - y - 65    // make the height relative to the screenheight
			vertical_scrollbar = ARRAY
				"scroller_vertical_blue0"
				"scroller_up_blue0"
				"scroller_down_blue0"
			displayed_element = test_table
			
		LOCAL.createTableButton = FUNCTION (_text, _width, _x, _sorting_order_function)
			return_value = BORDER_BUTTON
				x = _x[0]
				y = _x[1] - 21
				idle = createText(_text)
				idle.height = 14
				width = _width
				height = 20
				_x[0] = _x[0] + _width
				sorting_order_function = &_sorting_order_function
				on_mouse_up = FUNCTION
					LOCAL.k = scrollpane.component[0].object[0].object[0]
					debug("table identical : "+(scrollpane.displayed_element == scrollpane.component[0].object[0].object[0]))
					sortTable(scrollpane.displayed_element, &sorting_order_function)
					debug("table identical : "+(scrollpane.displayed_element == scrollpane.component[0].object[0].object[0]))

		LOCAL.table_button_x = ARRAY
			scrollpane.x - 1
			scrollpane.y
			
		object = ARRAY
			SCREEN_BACKGROUND
				width = screen_width
				height = screen_height
			back_button
			BORDER_BUTTON
				x = back_button.x - 10 - 24
				y = back_button.y
				idle = "home/char"
				on_mouse_up = FUNCTION
					displayInitializedScreen(@character_screen, false)

			// the hardware section
			createText("Chips",       20, 15)
			createText("CPU",         28, 17+16*1)
			createText("Coprocessor", 28, 17+16*2)
			createText("Attack",      28, 17+16*3)
			createText("Defense",     28, 17+16*4)
			createText("Stealth",     28, 17+16*5)
			createText("Analysis",    28, 17+16*6)

			// the software section
			createBorder(scrollpane.x-3, scrollpane.y-23, scrollpane.width+6, scrollpane.height+26, @TABLE_BACKGROUND_COLOR, true)
			scrollpane
			createTableButton("",        20, table_button_x, &compareProgramsDefault)
			createTableButton("Name",   116, table_button_x, &compareProgramsDefault)
			createTableButton("Class",   54, table_button_x, &compareProgramsDefault)
			createTableButton("Rating",  54, table_button_x, &compareProgramsDefault)
			createTableButton("Size",    54, table_button_x, &compareProgramsDefault)
			createTableButton("Loaded",  54, table_button_x, &compareProgramsDefault)
			createTableButton("Default", 54, table_button_x, &compareProgramsDefault)
					
		chip_text = ARRAY
		LOCAL.i = 0
		while i < 6
			chip_text[i] = createText("1", 130, 32+i*16, UNDEFINED, UNDEFINED, RIGHT)
			chip_text[i].h_align = LEFT
			object[] = chip_text[i]
			i = i + 1
			
			
		setup = FUNCTION
			debug("setup")
			updateBackButton(deck_screen.back_button)
			deck_screen.chip_text[0].text = player.deck.cpu
			deck_screen.chip_text[1].text = player.deck.coprocessor
			deck_screen.chip_text[2].text = player.deck.attack
			deck_screen.chip_text[3].text = player.deck.defense
			deck_screen.chip_text[4].text = player.deck.stealth
			deck_screen.chip_text[5].text = player.deck.analysis
			// create the new software table
			LOCAL.t = createTable (20, 0, 0, 19, 116, 54, 54, 54, 54, 54)
			t.cell_x = createArray (CENTER, 8, CENTER, CENTER, CENTER, CENTER, CENTER)
			LOCAL.i = 0
			LOCAL.p = player.deck.program
			while i < p.size
				addTableRow(t, wrapImage(p[i].type.image), createText(p[i].name,,,@TABLE_TEXT_COLOR), createText(p[i].type.type_name,,,@TABLE_TEXT_COLOR), createText(p[i].rating,,,@TABLE_TEXT_COLOR), createText(p[i].size,,,@TABLE_TEXT_COLOR), createText("c",,,@TABLE_TEXT_COLOR), createText("d",,,@TABLE_TEXT_COLOR))
				i = i + 1
			deck_screen.scrollpane.displayed_element = t