english


	// creates a border with the given values
	RULESET.create_border = FUNCTION (bx, by, bwidth, bheight, bbackground_color, binverted)
		return_value = BORDER
			x = bx
			y = by
			width = bwidth
			height = bheight
			background_color = @bbackground_color
			inverted = binverted == true
			
	
	// sets a line to the given values. this function purely exists to simplify scripts
	RULESET.set_line = FUNCTION (line, x, y, x2, y2, color)
		line.x = x
		line.y = y
		line.x2 = x2
		line.y2 = y2
		line.color = color
		

	// returns a new TEXT with the default settings as defined in the TEXT object stored in TEXT_STYLE
	RULESET.create_text = FUNCTION (text, x, y, color, font)
		return_value = copy(TEXT_STYLE)
		// for all settings which are not defined, the default settings will be used
		if text != UNDEFINED
			return_value.text = @text
		if x != UNDEFINED
			return_value.x = @x
		if y != UNDEFINED
			return_value.y = @y
		if color != UNDEFINED
			return_value.color = @color
		if font != UNDEFINED
			return_value.font = @font
			
	
	// returns a new TEXT with the default settings as defined in the TEXT object stored in TEXT_STYLE
	RULESET.create_text_bold = FUNCTION (text, x, y, color, font)
		return_value = copy(TEXT_STYLE_BOLD)
		// for all settings which are not defined, the default settings will be used
		if x != UNDEFINED
			return_value.x = @x
		if y != UNDEFINED
			return_value.y = @y
		if color != UNDEFINED
			return_value.color = @color
		if font != UNDEFINED
			return_value.font = @font


	RULESET.create_table = FUNCTION (_cell_height, _x, _y)
		return_value = TABLE
			x = _x
			y = _y
			cell_height = _cell_height
			cell_width = ARRAY
			LOCAL.i = 3
			while i < argument.size
				width = width + argument[i]
				cell_width[] = argument[i]
				i = i + 1
				
				
	RULESET.add_table_row = FUNCTION (table)
		// create the new table row
		LOCAL.row = COLLECTION
			component = ARRAY
		table.component[] = row
		LOCAL.i = 0
		LOCAL.x_offset = 0
		while i < table.cell_width.size
			// create the container for the component of the next cell
			row.component[] = COLLECTION
				x = x_offset
				y = table.height
				width = table.cell_width[i]
				height = table.cell_height
				LOCAL.a = ARRAY
				component = a
				// if the function caller has supplied an object for this cell, put it in the cell
				if argument[i+1] != UNDEFINED
					a[] = argument[i+1]
			i = i + 1
			x_offset = x_offset + table.cell_width[i]
		// calculate the new table height
		table.height = table.cell_height * table.component.size
		
		
	RULESET.set_table_cell = FUNCTION (table,row,column,content)
		table.component[row].component[column].component[0] = content
		if content.x == UNDEFINED
			if table.cell_x.structure_type == "ARRAY"
				content.x = table.cell_x[column]
			else
				content.x = table.cell_x
		if content.y == UNDEFINED
			if table.cell_y.structure_type == "ARRAY"
				content.y = table.cell_y[column]
			else
				content.y = table.cell_y
		if content.v_align == UNDEFINED
			if table.cell_v_align.structure_type == "ARRAY"
				content.v_align = table.cell_v_align[column]
			else
				content.v_align = table.cell_v_align
		if content.h_align == UNDEFINED
			if table.cell_h_align.structure_type == "ARRAY"
				content.h_align = table.cell_h_align[column]
			else
				content.h_align = table.cell_h_align
	
	
	RULESET.create_scrollbar = FUNCTION (_x, _y, _width, _height, _slider, _effect, _up_arrow, _down_arrow)
		return_value = SCROLLBAR
			x = _x
			y = _y
			width = _width
			height = _height
			if value_type(_slider) == "STRING"      // it's the name of an image
				_slider = COLLECTION
					object = ARRAY
						_slider
			_slider.x = CENTER
			_slider.y = pixelheight(_up_arrow)
			component = ARRAY
				_slider
				COLLECTION
					x = -1000000
					y = -1000000
					width = -2 * x
					height = -2 * y
					on_mouse_dragged = FUNCTION
						debug("mouse dragged")
// finish up the huge pane that captures mouse drag events here **************************************************************************
			if _up_arrow != UNDEFINED
				component[] = _up_arrow
// initialize the button functionality **************************************************************************
			if _down_arrow != UNDEFINED
				component[] = _down_arrow
// initialize the button functionality **************************************************************************
	
	

	RULESET.FETCH_BORDER_COLOR1 = FUNCTION
		return_value = BORDER_COLOR1
	
	RULESET.FETCH_BORDER_COLOR2 = FUNCTION
		return_value = BORDER_COLOR2

	RULESET.FETCH_BACKGROUND_COLOR = FUNCTION
		return_value = BACKGROUND_COLOR

	RULESET.FETCH_BACKGROUND_COLOR2 = FUNCTION
		return_value = BACKGROUND_COLOR2

	RULESET.FETCH_NCS_SELECTED_SKILL_COLOR = FUNCTION
		return_value = NCS_SELECTED_SKILL_COLOR

	RULESET.FETCH_NCS_UNSELECTED_SKILL_COLOR = FUNCTION
		return_value = NCS_UNSELECTED_SKILL_COLOR

	RULESET.FETCH_NCS_PRESSED_SKILL_COLOR = FUNCTION
		return_value = NCS_PRESSED_SKILL_COLOR

	RULESET.FETCH_NCS_OPTION_TEXT_COLOR = FUNCTION
		return_value = NCS_OPTION_TEXT_COLOR

	RULESET.FETCH_NCS_PRESSED_OPTION_TEXT_COLOR = FUNCTION
		return_value = NCS_PRESSED_OPTION_TEXT_COLOR

	RULESET.FETCH_NCS_ON_COLOR = FUNCTION
		return_value = NCS_ON_COLOR

	RULESET.FETCH_NCS_OFF_COLOR = FUNCTION
		return_value = NCS_OFF_COLOR

	RULESET.FETCH_NCS_USER_INPUT_COLOR = FUNCTION
		return_value = NCS_USER_INPUT_COLOR

	RULESET.FETCH_NCS_IMAGE_BACKGROUND_COLOR = FUNCTION
		return_value = NCS_IMAGE_BACKGROUND_COLOR
		
	RULESET.FETCH_NCS_USER_INPUT_BACKGROUND_COLOR = FUNCTION
		return_value = NCS_USER_INPUT_BACKGROUND_COLOR
