// This mission turns itself into one of the missions from Decker 1.12 when it
// becomes available. All the missions in the five standard_mission_*.files are
// identical. This means there may be five Decker 1.12 missions available at
// any given time.

english
	MISSION_LIST[] = MISSION
		reload_when_over = true
		available = true
		on_mission_over = FUNCTION
			unmarkSystemInUse(target_system)

		// if rating is a function, it gets called when the mission becomes available
		// we'll abuse that to initialize the mission when it becomes available
		rating = FUNCTION (mission)
			if player.standard_mission_target == UNDEFINED
				player.standard_mission_target = ARRAY     // stores the target system of each standard mission to make sure no two missions have the same target system
			with mission
				LOCAL.a
				LOCAL.b
				LOCAL.c

				deadline = random(0,4)

				debug("a")

				// make the target system rating similar to the player's base_mission_rating
				target_system = UNDEFINED
				while target_system == UNDEFINED
					a = player.mission_base_rating + ( random(0,9) == 0 ? 0 : random(-1,1) + random(-1,1) )
					if a < 1
						a = 1
					if a > 20
						a = 20
					// pick a system with the chosen rating that is not currently used by another standard mission
					a = (a-1) * 5 + random(0,4)
					for i = 0 to 4
						if !isSystemInUse(a)
							target_system = standard_mission_system[a]
							markSystemInUse(a)
							break
						else
							a = a + 1
							if (a / 5) * 5 == a
								a = a - 5


				debug("c")


				// generate the mission goal
				a = random(1,100)
				LOCAL.goal_count = 1
				goal = ARRAY

				// 45% chance of mission with a file target
				if a <= 45
					b = target_system.type.file[random(0,target_system.type.file.size-1)]
					if random(1,40) <= target_system.rating
						goal_count = random(2,5)

					if a < 15
						title = "Steal Files"
						description = "A client needs access to "+b+" from the "+target_system.name+" system. You must recover a copy of this data."
						for i = 1 to goal_count
							goal[] = DOWNLOAD_FILE
								target = FILE
									description = b
					else if a < 25
						title = "Steal & Erase Files"
						description = "A client desires sole access to "+b+" from the "+target_system.name+" system. You must recover a copy of this data and erase it from the system."
						for i = 1 to goal_count
							goal[] = DOWNLOAD_AND_ERASE_FILE
								target = FILE
									description = b
					else if a < 35
						title = "Erase Files"
						description = "A client wishes to destroy "+b+" located on the "+target_system.name+" system. You must locate this data and erase it from the system."
						for i = 1 to goal_count
							goal[] = ERASE_FILE
								target = FILE
									description = b
					else
						title = "Edit Files"
						description = "A client wishes to alter "+b+" located on the "+target_system.name+" system. You must locate this data in the system and edit it to the client's specifications."
						for i = 1 to goal_count
							goal[] = EDIT_FILE
								target = FILE
									description = b

					if random(1,5) <= ( goal[0].structure_type == "EDIT_FILE" ? 2 : 1 )
						goal[] = NO_RED_ALARM

				// 40% chance for a mission with an IO target
				else if a < 85
					if random(1,40) <= target_system.rating
						goal_count = random(2,5)

					// to determine the mission target pick a random IO node type
					a = random (0,target_system.type.deactivate_io_target.size + target_system.type.activate_io_target.size + target_system.type.sabotage_io_target.size - 1)
					if a < target_system.type.deactivate_io_target.size
						b = target_system.type.deactivate_io_target[a]
						title = "Deactivate I/O"
						if goal_count == 1
							description = "A client wishes to deactivate "+b+" from the "+target_system.name+" system. You must locate the I/O node controlling this and deactivate it."
						else
							description = "A client wishes to deactivate "+b+" from the "+target_system.name+" system. You must locate the "+goal_count+" I/O nodes controlling this and deactivate them."
					else
						a = a - target_system.type.deactivate_io_target.size
						if a < target_system.type.activate_io_target.size
							b = target_system.type.activate_io_target[a]
							title = "Activate I/O"
							if goal_count == 1
								description = "A client wishes to activate "+b+" from the "+target_system.name+" system. You must locate the I/O node controlling this and activate it."
							else
								description = "A client wishes to activate "+b+" from the "+target_system.name+" system. You must locate the "+goal_count+" I/O nodes controlling this and activate them."
						else
							b = target_system.type.sabotage_io_target[a-target_system.type.activate_io_target.size]
							title = "Sabotage"
							if goal_count == 1
								description = "A client wishes to sabotage "+b+" at the "+target_system.name+" system. You must locate the I/O node controlling this and sabotage it."
							else
								description = "A client wishes to sabotage "+b+" at the "+target_system.name+" system. You must locate the "+goal_count+" I/O nodes controlling this and sabotage them."

					a = 0
					while a < goal_count
						a = a + 1
						goal[] = MANIPULATE_IO
							target = NODE
								type = b
							incomplete = (c == "Deactivate I/O") ? "IO node has not been deactivated" : (c == "Activate I/O") ? "IO node has not been activated" : "IO node has not been sabotaged"
							completed  = (c == "Deactivate I/O") ? "IO node has been deactivated"     : (c == "Activate I/O") ? "IO node has been activated"     : "IO node has been sabotaged"

					if random(1,5) == 1
						goal[] = goal[0]
						goal[0] = NO_RED_ALARM

				// 5% chance of a crash system mission
				else if a < 90
					title = "Crash System"
					description = "A client wishes to crash the "+target_system.name+" system. You must locate the CPU of the system and initiate a system failure."
					goal[] = CRASH_SYSTEM

				// 5% chance of a create backdoor mission
				else if a < 95
					title = "Create Backdoor"
					description = "A client wishes for a new backdoor to be created into the "+target_system.name+" system. You must locate the CPU for the system and create this back door. The client's decker will take care of the rest."
					goal[] = CREATE_BACKDOOR
					if random(1,2) == 1
						goal[] = goal[0]
						goal[0] = NO_RED_ALARM

				// 5% chance of a run program mission
				else
					title = "Run Program"

					// create the program the player will have to run
					// base the name of the hack program on the index of the target system so we don't get duplicate names
					c = indexof(target_system, RULESET.standard_mission_system)
					c = random("a","z") + random("a","z") + random("a","z") + c + random(0,9) + random(0,9) + random(0,9) + random(0,9)
					b = THING
						name = "Client Program " + c
						rating = target_system.rating
						size = item_rating * 4
						state = INSTALLED
						value = 0
						type = THING_TYPE
							name = "Client Program"
							complexity = 4
							value = 0
							image = "shop_item/attack"
							type = ARRAY
								SPECIAL
								CLIENT_PROGRAM

					a = random(1,3)   // 1 = IO node, 2 = DS node, 3 = CPU
					if a != 3 && random(1,40) <= target_system.rating
						goal_count = random(2,5)
						description = "A client needs a special program activated on the "+target_system.name+" system. Locate the target nodes by running the program, then activate the program within each nodes. You must remain in each target node until the program has finished running. Upon accepting the mission you will receive the client's program "+c+"."
					else
						description = "A client needs a special program activated on the "+target_system.name+" system. Locate the target node by running the program, then activate the program within the node. You must remain in the node until the program has finished running. Upon accepting the mission you will receive the client's program "+c+"."

					for i = goal_count-1 downto 0
						goal[] = RUN_PROGRAM
// run program target must be a node, not a node description !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
							target = NODE
							debug("standard missions with run program target need target nodes")
// END ************************************************
							program = b
							execution_time = 6 + b.rating / 2
							incomplete = "Program has not been run in node"
							completed = "Program was successfully run in node"

					if random(1,5) == 1
						goal[] = goal[0]
						goal[0] = NO_RED_ALARM

				debug("b")

				// if the target system rating is 5 or higher, there's a 10% chance that the mission will be timed
				if target_system.rating >= 5 && random(1,10) == 1
					deadline = 0
					a = goal[0].structure_type == "NO_RED_ALARM" ? 1 : 0
					goal[] = goal[a]
					goal[a] = TIME_RESTRICTION
						end_time = 180 * ((target_system.rating+3)/4)       // 3 minutes per area within the target system


				return_value = defaultMissionRating(mission)
