english
	RULESET.generateNodeIce = FUNCTION (node, node_rating, cluster)
		with node
			LOCAL.a
			LOCAL.r
			// add guard_exit ice
			for i = 3 downto 0
				if connection[i] && cluster[x][y] != cluster[x+DELTA_X[i]][y+DELTA_Y[i]]
					generateIce(GUARD_EXIT, node_rating, node, i)
			// add the normal ice. junctions don't have any ice beyond the GUARD_EXIT ice generated above
			if type != JUNCTION
				// determine how much extra ice there should be
				r = random(0,3) + (type==CPU||type==COP||type==COP_SECURITY?2:0) + (type==SPU||type==PORTAL_IN||type==PORTAL_OUT?1:0)
				if r == 3
					r = 2
				else if r > 3
					r = 3
				else if r == 0 &&( type==IO_ICE || IO_EXTERNAL_ALERT )&& random(0,40) < node_rating
					r = 1
				// no more than one ice in the system entry node, to make things easier
				if r > 1 && type == PORTAL_OUT &&( target.structure_type != "NODE" || target.area.system != area.system )
					r = 1
				// make the ice
				for i = r-1 downto 0
					if i == 0
						// the first ice is a PROBE, GUARD_ACCESS, or response ATTACK ice
						if type == COP
							generateIce(PROBE, node_rating, node)
						else if type == PORTAL_OUT &&( target.structure_type != "NODE" || target.area.system != area.system )
							// a GUARD_EXIT ice is usually pointless in a node that leads out of the system, so we use an ATTACK ice instead
							generateIce(ATTACK, node_rating, node, true)
						else
							// all other ice types get a GUARD_ACCESS ice
							generateIce(GUARD_ACCESS, node_rating, node)
					else if i == 1
						// the second ice in a node is attack or trace
						// if this node is a COP, the ice will also respond to system alerts
						if node_rating > 2 && random(1,4) == 1
							generateIce(TRACE, node_rating, node, node.type==COP)
						else
							generateIce(ATTACK, node_rating, node, node.type==COP)
					else
						// all remaining ice will be attack
						// if this node is a COP, the ice will also respond to system alerts
						generateIce(ATTACK, node_rating, node, node.type==COP)
				if type == DATASTORE
					// add GUARD_FILE ice to the datastore files
					for i = file.size-1 downto 0
						a = file[i].type
						r = random(1,20)
						if a == USELESS
							if r == 1
								generateIce(GUARD_FILE, node_rating, node, file[i])
						else if a == VALUABLE
							if r <= 4
								generateIce(GUARD_FILE, node_rating, node, file[i])
						else if a == QUEST
							if r <= 6
								generateIce(GUARD_FILE, node_rating, node, file[i])
						else if a == CLUE
							if r <= 15
								generateIce(GUARD_FILE, node_rating, node, file[i])
						else if a == PASSWORD
							generateIce(GUARD_FILE, node_rating, node, file[i])





	RULESET.pickIceType = FUNCTION (_type, _rating)
		LOCAL.t = ARRAY
		// find all the types with the correct general type and which have a version for the supplied _rating
		for i = ICE_TYPES.size-1 downto 0
			if ICE_TYPES[i].type == _type && ICE_TYPES[i].min_rating <= _rating
				t[] = ICE_TYPES[i]
		// if there is onley one type, we're done
		if t.size == 1
			return_value = t[0]
		else
			// otherwise determine the probability of each type
			LOCAL.p = createSizedArray(t.size)
			LOCAL.r = 0
			for i = t.size-1 downto 0
				p[i] = value_type(t[i].probability) != "FUNCTION" ? t[i].probability : t[i].probability(_rating)
				if p[i] < 0
					p[i] = 0
				r = r + p[i]
			// pick one of the available types
			r = random(0,r-1)
			LOCAL.i = 0
			while r >= p[i]
				r = r - p[i]
				i = i + 1
			return_value = t[i]


	RULESET.generateIce = FUNCTION (_type, _rating, _node, data)
		// there is a 10% [5%] chance that ice from with rating 2 [4] and above gets a +1 [+2] rating bonus
		LOCAL.r = random(1,20)
		if r <= 2 && _rating > 1
			_rating++
		else if r <= 3 && _rating > 3
			_rating = _rating + 2
		// ice in a CPU, SPU, and (if it's not a GUARD_EXIT ice) COP_SECURITY gets a +1 to its rating
		if _node.type == CPU || node.type == SPU ||( node.type == COP_SECURITY && _type != GUARD_EXIT )
			_rating++
		// guard_exit ice gets a rating boost if it leads to a CPU or SPU
		if _type == GUARD_EXIT && _node.type != CPU && node.type != SPU && data >= 0 && data <= 3 && _node.area.map != UNDEFINED
			r = _node.area.map[_node.x+DELTA_X[data]][_node.y+DELTA_Y[data]]
			if r.type == CPU || r.type == SPU
				_rating++
		// create the ice
		return_value = ICE
			type = pickIceType(_type, _rating)
			rating = _rating
			node = _node
		if _type == GUARD_EXIT
			return_value.guarded_direction = data
		else if _type == GUARD_FILE
			return_value.guarded_file = data
		else if data
			return_value.response_ice = true
		return_value.home_node = _node
		placeObject(return_value, _node)
		// add the ice to the list of currently active ice, if it's always active
		if _node.area != UNDEFINED &&( _type == PROBE || return_value.type.roaming )
			_node.area.active_ice[] = return_value



	RULESET.notOccupied = FUNCTION (node, x, y)
		return_value = true
		LOCAL.o = node.objects
		for i = o.size-1 downto 0
			if o[i].x == x && o[i].y == y
				return_value = false
				break
