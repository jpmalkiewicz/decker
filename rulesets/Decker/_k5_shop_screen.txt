english
	RULESET.shop_screen = COMPONENT
		title = "Decker - Thrifty Electronics"
		width = 560
		height = 380

		char_money_caption = createText("Money", 20, height-29, , , , CENTER)
		char_money = createText("", 20+pixelwidth(char_money_caption)+20, char_money_caption.y, , , , CENTER)
		item_table_caption = createTextBold("Items for sale", CENTER, 15)
		home_button = BORDER_BUTTON
			x = COMPONENT.width-18
			v_align = CENTER
			h_align = LEFT
			y = char_money_caption.y
			idle = IMAGE
				image = "home/home"
			on_mouse_up = FUNCTION
				displayScreen(home_screen, false)
		purchase_button_wrapper = SET
			x = COMPONENT.width*37/100
			y = home_button.y
		purchase_button = BORDER_BUTTON
			v_align = CENTER
			h_align = CENTER
			height = 24
			idle = createText("Purchase")
			width = pixelwidth(idle)*13/10
			text_padding = 3
			on_mouse_up = FUNCTION
				LOCAL.index = shop_screen.scrollpane.displayed_element.selected_row
				LOCAL.item = player.shop_inventory[index]
				player.money = player.money - item.value
				if item.type.category[0] == CHIP
					LOCAL.chip_type = item.type.category[item.type.category.size-1]
					if chip_type == CPU
						player.deck.cpu = item.rating
					else if chip_type == COPROCESSOR
						player.deck.coprocessor = item.rating
					else if chip_type == ATTACK
						player.deck.cpu = item.rating
					else if chip_type == DEFENSE
						player.deck.defense = item.rating
					else if chip_type == STEALTH
						player.deck.stealth = item.rating
					else if chip_type == ANALYSIS
						player.deck.analysis = item.rating
				else if item.type.category[0] == HARDWARE
					// the player cannot have two pieces of hardware of the same type
					LOCAL.h = player.deck.optional_hardware
					LOCAL.append = true
					for i = 0 to h.size-1
						if h[i].type.id == item.id
							if h[i].type.id == item.type.id
								h[i] = item
								append = false
								break
					if append
						h[] = item
					// optional hardware is sorted alphabetically
					LOCAL.swap
					for a = h.size-2 downto 0
						for b = 0 to a
							if h[b].name > h[b+1].name
								swap = h[b+1]
								h[b+1] = h[b]
								h[b] = swap
				else   // item.type.category[0] == PROGRAM
					insert(player.deck.program,0)
					player.deck.program[0] = item
					item.state = INSTALLED
				delete(player.shop_inventory, index)
				deleteTableRow(shop_screen.scrollpane.displayed_element, index)
				shop_screen.purchase_button_wrapper.component = UNDEFINED
				shop_screen.setup()
		special_order_button = BORDER_BUTTON
			x = COMPONENT.width*68/100
			y = home_button.y
			v_align = CENTER
			h_align = CENTER
			height = 24
			idle = createText("Special Order")
			width = pixelwidth(idle)*13/10
			text_padding = 3

		scrollpane = SCROLLPANE
			x = 20
			y = 60
			width = COMPONENT.width - 2 * 20
			height = COMPONENT.height - y - 54    // make the height relative to the screenheight
			vertical_scrollbar = ARRAY
				"scroller_vertical_blue0"
				"scroller_up_blue0"
				"scroller_down_blue0"

		LOCAL.createTableButton = FUNCTION (_column, _text, _width, _x, _sorting_order_function)
			return_value = BORDER_BUTTON
				x = _x[0]
				y = _x[1] - 20
				idle = createText(_text)
				idle.height = 14
				width = _width
				height = 20
				_x[0] = _x[0] + _width
				sorting_order_function = _sorting_order_function
				column = _column
				on_mouse_up = FUNCTION
					sortTableInShop(shop_screen.scrollpane.displayed_element, sorting_order_function, column, player.shop_inventory)

		LOCAL.table_button_x = ARRAY
			scrollpane.x
			scrollpane.y

		component = ARRAY
			SCREEN_BACKGROUND
			char_money_caption
			char_money
			item_table_caption
			home_button
			special_order_button
			purchase_button_wrapper

			// the software section
			createBorder(scrollpane.x-2, scrollpane.y-22, scrollpane.width+4, scrollpane.height+24, @TABLE_BACKGROUND_COLOR, true)
			scrollpane
			createTableButton(0, "",         19, table_button_x, &compareShopItemsPreset)
			createTableButton(1, "Name",    141, table_button_x, &compareText)
			createTableButton(2, "Type",    100, table_button_x, &compareText)
			createTableButton(3, "Rating",   50, table_button_x, &compareRatings)
			createTableButton(4, "Current",  50, table_button_x, &compareCurrentRatings)
			createTableButton(5, "Cost",     50, table_button_x, &compareNumbersInverted)
			createTableButton(6, "Avg Cost", 60, table_button_x, &compareNumbersInverted)
			createTableButton(7, "Size",     50, table_button_x, &compareNumbersInverted)

		setup = FUNCTION
			shop_screen.char_money.text = player.money

			// create the new shop list ***************************************************************************************************************
			LOCAL.t = createTable ( , 18, 19, 141, 100, 50, 50, 50, 60, 50)
			t.cell_x = createArray (CENTER, 8, CENTER, CENTER, CENTER, CENTER, CENTER, CENTER)
			t.cell_y = CENTER
			t.selected_row_background = @TABLE_SELECTED_ROW_BACKGROUND
			t.selected_row = scrollpane.displayed_element.selected_row
			t.on_selection_change = FUNCTION (table, old_selected_row, new_selected_row)
				with shop_screen
					purchase_button_wrapper.component = UNDEFINED
					if new_selected_row >= 0 && new_selected_row < table.rows
						LOCAL.k = player.shop_inventory[new_selected_row]
						if player.money >= k.value &&( k.type.category[0] == PROGRAM || k.rating > getCurrentMaxRating(player.deck, k.type) )
							purchase_button_wrapper.component = purchase_button
			LOCAL.p = player.shop_inventory
			LOCAL.m
			LOCAL.pp = player.deck.program
			LOCAL.ph = player.deck.optional_hardware
			LOCAL.rating
			for i = 0 to p.size-1
				// determine the current max rating the player has of the item we want to add to the list
				m = getCurrentMaxRating(player.deck, p[i].type)
				if m == 0
					m = UNDEFINED
				// assemble the rating info
				rating = p[i].rating
				if p[i].type.category[0] == HARDWARE
					if p[i].type.max_rating == 1
						rating = UNDEFINED
					else
						rating = rating + " ("+p[i].type.max_rating+")"
				// do the layout for the rating and current rating columns right before the first piece of hardware is added
				if i > 0 && p[i].type.category[0] == HARDWARE && p[i-1].type.category[0] != HARDWARE
					centerRightAlignedTableColumn(t, 3)
					centerRightAlignedTableColumn(t, 4)
				// display a check mark instead of a number if a piece of hardware has a max rating of 1 and the player already has it
				if m == 1 && p[i].type.max_rating == 1
					m = "check"
				else if m != UNDEFINED
					m = createText(m,,,@TABLE_TEXT_COLOR)
				addTableRow(t, createImage(p[i].type.image), createText(p[i].name,,,@TABLE_TEXT_COLOR), createText(p[i].type.name,,,@TABLE_TEXT_COLOR), createText(rating,,,@TABLE_TEXT_COLOR), m, createText(p[i].value,,,@TABLE_TEXT_COLOR), createText(p[i].average_value,,,@TABLE_TEXT_COLOR), createText(p[i].size,,,@TABLE_TEXT_COLOR))
			centerRightAlignedTableColumn(t, 5)
			centerRightAlignedTableColumn(t, 6)
			centerRightAlignedTableColumn(t, 7)
			shop_screen.scrollpane.displayed_element = t
