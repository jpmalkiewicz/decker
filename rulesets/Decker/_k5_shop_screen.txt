english
	RULESET.shop_screen = COMPONENT
		title = "Decker - Thrifty Electronics"
		width = 560
		height = 400

		char_money_caption = createText("Money", 20, height-70)
		char_money = createText("", 20+pixelwidth(char_money_caption)+20, char_money_caption.y)
		item_table_caption = createTextBold("Items for sale", CENTER, 15)
		scrollpane = SCROLLPANE
			x = 20
			y = 60
			width = COMPONENT.width - 2 * 20
			height = COMPONENT.height - y - 80    // make the height relative to the screenheight
			vertical_scrollbar = ARRAY
				"scroller_vertical_blue0"
				"scroller_up_blue0"
				"scroller_down_blue0"

		LOCAL.createTableButton = FUNCTION (_column, _text, _width, _x, _sorting_order_function)
			return_value = BORDER_BUTTON
				x = _x[0]
				y = _x[1] - 20
				idle = createText(_text)
				idle.height = 14
				width = _width
				height = 20
				_x[0] = _x[0] + _width
				sorting_order_function = _sorting_order_function
				column = _column
				on_mouse_up = FUNCTION
					sortTableInShop(scrollpane.displayed_element, sorting_order_function, column, player.shop_inventory)

		LOCAL.table_button_x = ARRAY
			scrollpane.x
			scrollpane.y

		component = ARRAY
			SCREEN_BACKGROUND
				width = COMPONENT.width
				height = COMPONENT.height
			char_money_caption
			char_money
			item_table_caption

			// the software section
			createBorder(scrollpane.x-2, scrollpane.y-22, scrollpane.width+4, scrollpane.height+24, @TABLE_BACKGROUND_COLOR, true)
			scrollpane
			createTableButton(0, "",         19, table_button_x, &compareShopItemsPreset)
			createTableButton(1, "Name",    141, table_button_x, &compareText)
			createTableButton(2, "Type",    100, table_button_x, &compareText)
			createTableButton(3, "Rating",   50, table_button_x, &compareRatings)
			createTableButton(4, "Current",  50, table_button_x, &compareCurrentRatings)
			createTableButton(5, "Cost",     50, table_button_x, &compareNumbersInverted)
			createTableButton(6, "Avg Cost", 60, table_button_x, &compareNumbersInverted)
			createTableButton(7, "Size",     50, table_button_x, &compareNumbersInverted)

		setup = FUNCTION
			shop_screen.char_money.text = player.money

			// create the new software table ***********************************************************************************************************
			LOCAL.t = createTable ( , 18, 19, 141, 100, 50, 50, 50, 60, 50)
			t.cell_x = createArray (CENTER, 8, CENTER, CENTER, CENTER, CENTER, CENTER, CENTER)
			t.cell_y = CENTER
			t.selected_row_background = @TABLE_SELECTED_ROW_BACKGROUND
			t.selected_row = scrollpane.displayed_element.selected_row
			t.on_row_drag = FUNCTION (table, old_row_index, new_row_index)
				// rearrange the programs in the player deck accordingly
				LOCAL.p = player.deck.program
				LOCAL.backup = p[old_row_index]
				if old_row_index > new_row_index
					for i = old_row_index downto new_row_index+1
						p[i] = p[i-1]
				else
					for i = old_row_index to new_row_index-1
						p[i] = p[i+1]
				p[new_row_index] = backup
			t.on_selection_change = FUNCTION (table, old_selected_row, new_selected_row)
				with shop_screen
					if new_selected_row >= 0 && new_selected_row < table.rows
					else
			LOCAL.p = player.shop_inventory
			LOCAL.m
			LOCAL.pp = player.deck.program
			LOCAL.ph = player.deck.optional_hardware
			LOCAL.rating
			for i = 0 to p.size-1
				// determine the current max rating the player has of the item we want to add to the list
				m = -1
				if p[i].type.category[0] == PROGRAM
					for j = pp.size-1 downto 0
						if p[i].type == pp[j].type
							m = max(m, pp[j].rating)
				else if p[i].type.category[0] == CHIP
					LOCAL.chip_type = p[i].type.category[p[i].type.category.size-1]
					if chip_type == CPU
						m = player.deck.cpu
					else if chip_type == COPROCESSOR
						m = player.deck.coprocessor
					else if chip_type == ATTACK
						m = player.deck.cpu
					else if chip_type == DEFENSE
						m = player.deck.defense
					else if chip_type == STEALTH
						m = player.deck.stealth
					else if chip_type == ANALYSIS
						m = player.deck.analysis
				else if p[i].type.category[0] == HARDWARE
					for j = ph.size-1 downto 0
						if p[i].type == ph[j].type
							m = max(m, ph[j].rating)
				if m == -1
					m = UNDEFINED
				// assemble the rating info
				rating = p[i].rating
				if p[i].type.category[0] == HARDWARE
					if p[i].type.max_rating == 1
						rating = UNDEFINED
					else
						rating = rating + " ("+p[i].type.max_rating+")"
				// do the layout for the rating and current rating columns right before the first piece of hardware is added
				if i > 0 && p[i].type.category[0] == HARDWARE && p[i-1].type.category[0] != HARDWARE
					centerRightAlignedTableColumn(t, 3)
					centerRightAlignedTableColumn(t, 4)
				// display a check mark instead of a number if a piece of hardware has a max rating of 1 and the player already has it
				if m == 1 && p[i].type.max_rating == 1
					m = "check"
				else if m != UNDEFINED
					m = createText(m,,,@TABLE_TEXT_COLOR)
				addTableRow(t, p[i].type.image, createText(p[i].name,,,@TABLE_TEXT_COLOR), createText(p[i].type.name,,,@TABLE_TEXT_COLOR), createText(rating,,,@TABLE_TEXT_COLOR), m, createText(p[i].value,,,@TABLE_TEXT_COLOR), createText(p[i].average_value,,,@TABLE_TEXT_COLOR), createText(p[i].size,,,@TABLE_TEXT_COLOR))
			centerRightAlignedTableColumn(t, 5)
			centerRightAlignedTableColumn(t, 6)
			centerRightAlignedTableColumn(t, 7)
			shop_screen.scrollpane.displayed_element = t
